/** Generated by the default template from graphql-java-generator */
package org.wso2.choreo.analytics.gql;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.wso2.choreo.analytics.gql.config.APIConfiguration;
import org.wso2.choreo.analytics.gql.config.ConfigHolder;

import java.io.IOException;
import java.io.Serializable;
import javax.annotation.PostConstruct;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@SpringBootApplication(scanBasePackages = { "org.wso2.choreo.analytics.gql", "com.graphql_java_generator" ,"org.wso2.choreo.analytics.gql" })
@EnableJpaRepositories(basePackages = { "org.wso2.choreo.analytics.gql", "com.graphql_java_generator" ,"org.wso2.choreo.analytics.gql" })
@EntityScan(basePackages = { "org.wso2.choreo.analytics.gql", "com.graphql_java_generator" ,"org.wso2.choreo.analytics.gql" })
@EnableConfigurationProperties
public class AnalyticsApplication {

	@Autowired
	private APIConfiguration configuration;

	@PostConstruct
	void postConstruct() {
		ConfigHolder.getInstance().setConfiguration(configuration);
		if (configuration.getSecurity().getTrustStore() != null
				&& configuration.getSecurity().getTrustStorePass() != null) {
			System.setProperty("javax.net.ssl.trustStore", configuration.getSecurity().getTrustStore());
			System.setProperty("javax.net.ssl.trustStorePassword", configuration.getSecurity().getTrustStorePass());
		}

	}
	public static void main(String[] args) {
		SpringApplication.run(AnalyticsApplication.class, args);

//		new AnalyticsApplication().test();
	}

	void test() {
		ObjectMapper mapper = new ObjectMapper();
		try {
			String s = mapper.writeValueAsString(new Obj1());
			System.out.println(s);

			SimpleModule module =
					new SimpleModule("CustomCarDeserializer", new Version(1, 0, 0, null, null, null));
			module.addDeserializer(Obj2.class, new CustomAPIDeserializer());
			mapper.registerModule(module);
			Obj2 o2 = mapper.readValue(s, Obj2.class);
			System.out.println(o2.getApiName());
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
	}
	class Obj1 implements Serializable {
		String name = "pizza";
		String version = "1.0.0";

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public String getVersion() {
			return version;
		}

		public void setVersion(String version) {
			this.version = version;
		}
	}

	static class Obj2 implements Serializable {
		String apiName;
		String apiVersion;

		public String getApiName() {
			return apiName;
		}

		public String getApiVersion() {
			return apiVersion;
		}

		public void setApiName(String apiName) {
			this.apiName = apiName;
		}

		public void setApiVersion(String apiVersion) {
			this.apiVersion = apiVersion;
		}
	}

	static class CustomAPIDeserializer extends StdDeserializer<Obj2> {
		public CustomAPIDeserializer() {
			super(Obj2.class);
		}

		@Override
		public Obj2 deserialize(JsonParser parser, DeserializationContext deserializer) {
			Obj2 car = new Obj2();
			ObjectCodec codec = parser.getCodec();
			JsonNode node = null;
			try {
				node = codec.readTree(parser);
			} catch (IOException e) {
				e.printStackTrace();
			}

			// try catch block
			JsonNode colorNode = node.get("name");
			String apiName = colorNode.asText();
			car.setApiName(apiName);
			return car;
		}
	}
}
