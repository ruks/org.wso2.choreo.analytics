schema {
    query: Query
    mutation: Mutation
}

type Query {

    #util
    listAllAPI(provider: String, environment: Environment!): [API]
    listVersion(apiName: String, environment: Environment!): [String]
    listApplications(owner: String, environment: Environment!): [Application]
    listProviders(environment: Environment!): [Provider]

    #alert
    getAllAPIAlertConfig(environment: Environment!): [APIAlertConfig]
    getAllAppAlertConfig(environment: Environment!): [AppAlertConfig]
    getAlertSubscription(environment: Environment!): AlertSubscription

    #overview
    getTotalTraffic(filter: TimeFilter!, environment: Environment!): Int
    getAvgErrorRate(filter: TimeFilter!, environment: Environment!): Int
    getOverallLatency(filter: TimeFilter!, environment: Environment!): Int
    getApiAvailability(filter: TimeFilter!, environment: Environment!): ApiAvailability
    getLatencySummary(filter: TimeFilter!, environment: Environment!): LatencySummary

    #error
    getTargetErrorsOverTime(filter: ErrorsOverTimeFilter!, environment: Environment!): [TargetErrorsOverTime]
    getGatewayErrorsOverTime(filter: ErrorsOverTimeFilter!, environment: Environment!): [GatewayErrorsOverTime]
    getTargetErrorsMap(filter: ErrorsOverTimeFilter!, environment: Environment!): [ErrorsMap]
    getGatewayErrorsMap(filter: ErrorsOverTimeFilter!, environment: Environment!): [ErrorsMap]
    getErrorsByCategory(filter: ErrorsByCategoryFilter!, environment: Environment!): [ErrorsByCategory]

    # traffic
    getAPIUsageOverTime(filter: APIUsageFilter!, environment: Environment!): [IntMap]
    getAPIUsageByApp(filter: APIUsageFilter!, environment: Environment!): [IntMap]
    getAPIUsageByAppOverTime(filter: APIUsageFilter!, environment: Environment!): [IntMap]
    getTargetUsage(filter: TimeFilter!, environment: Environment!): [IntMap]
    getTargetUsageOverTime(filter: TimeFilter!, environment: Environment!): [IntMap]
    getResourceUsage(filter: ResourceUsageFilter!, environment: Environment!): [ResourceUsage]

    # latency
    topSlowestAPIs(filter: TimeFilter!, environment: Environment!): [IntMap]
    getLatency(filter: LatencyFilter!, environment: Environment!): [Latency]

    #cache
    getCacheHits(filter: LatencyFilter!, environment: Environment!): [CacheHits]

    #device
    getTopPlatforms(filter: DeviceFilter!, environment: Environment!): [IntMap]
    getTopAgents(filter: DeviceFilter!, environment: Environment!): [IntMap]

}

type Mutation {
    addAPIAlertConfig(alertConfig: APIAlertConfigInput): APIAlertConfig
    addAppAlertConfig(alertConfig: AppAlertConfigInput): AppAlertConfig
    SubscribeAlert(config: AlertSubscriptionInput): AlertSubscription
    UnSubscribeAlert(userId: String): AlertSubscription
}

# type
type AlertSubscription {
    alertTypes: String
    emails: String
}

type AppAlertConfig {
    apiName: String
    apiVersion: String
    appName: String
    appOwner: String
    thresholdRequestCount: Int
}

type APIAlertConfig {
    apiName: String
    apiVersion: String
    thresholdResponseTime: Int
    thresholdBackendTime: Int
}

type ApiErrorSummary {
    apiName: String
    apiVersion: String
    uriTemplate: String
    method: String
    applicationName: String
    applicationOwner: String
    _2xx: Int
    _4xx: Int
    _5xx: Int
    faulty: Int
    throttled: Int
}

type ApiLatencySummary {
    apiCreatorTenantDomain: String
    apiName: String
    apiVersion: String
    apiResourceTemplate: String
    apiMethod: String
    avgResponseLatency: Int
    avgServiceLatency: Int
    avgBackendLatency: Int
    avgRequestMediationLatency: Int
    avgResponseMediationLatency: Int
    avgSecurityLatency: Int
    avgThrottlingLatency: Int
    avgOtherLatency: Int
}

type Application {
    id: ID
    name: String
    owner: String
}

type Provider {
    name: String
}

type ApiAvailability {
    availableCount: Int
    highResponseTimeCount: Int
    serverErrorCount: Int
}

type LatencySummary {
    time: String
    requestCount: Int
    errorCount: Int
    latencyTime: Int
}

type API {
    id: ID
    name: String
    version: String
    provider: String
}

type TargetErrorsOverTime {
    time: String
    _4xx: Int
    _5xx: Int
}

type GatewayErrorsOverTime {
    time: String
    authentication: Int
    throttled: Int
    resourceNotFound: Int
    others: Int
}

type ErrorsMap {
    label: String
    counts: [IntMap]
}

type IntMap {
    key: String
    value: Int
}

type ErrorsByCategory {
    code: Int
    count: Int
}

type Latency {
    time: String
    backend: Int
    requestMed: Int
    responseMed: Int
}

type CacheHits {
    time: String
    hits: Int
    missed: Int
}

type ResourceUsage {
    apiName: String
    apiVersion: String
    target: String
    verb: String
    count: Int
}

# input
input APIAlertConfigInput {
    apiName: String
    apiVersion: String
    thresholdResponseTime: Int
    thresholdBackendTime: Int
}

input AppAlertConfigInput {
    apiName: String
    apiVersion: String
    appName: String
    appOwner: String
    thresholdRequestCount: Int
}

input AlertSubscriptionInput {
    alertTypes: String
    emails: String
}

input ErrorsOverTimeFilter {
    from: String
    to: String
    apiId: String
    appId: String
}

input APIUsageFilter {
    from: String
    to: String
    apiId: String
    appId: String
}

input ErrorsByCategoryFilter {
    from: String
    to: String
    apiId: String
}

input CacheFilter {
    from: String
    to: String
    apiId: String
}

input DeviceFilter {
    from: String
    to: String
    apiId: String
}

input Environment {
    name: String!
}

input TimeFilter {
    from: String!
    to: String!
}

input ResourceUsageFilter {
    from: String
    to: String
    apiId: String
    appId: String
    target: String
    verb: String
}

input LatencyFilter {
    from: String
    to: String
    apiId: String
    target: String
    verb: String
}
