schema {
    query: Query,
    mutation: Mutation
}

type Query {
    apiErrorSummary(from: Int, to: Int, limit: Int, orderBy: String, asc: Boolean): ApiErrorSummary
    apiLatencySummary(from: String, to: String, limit: Int, orderBy: String, asc: Boolean, apiName: String, apiVersion: String, apiResourceTemplate: String, apiMethod: String): [ApiLatencySummary]

#util
    listAllAPI(provider: String): API
    listVersion(apiName: String): String
    listApplications(applicationOwner: String): Application
    listProviders: String

#alert
    getAllAPIAlertConfig: [APIAlertConfig]
    getAllAppAlertConfig: [AppAlertConfig]
    getAlertSubscription(userId: String!): AlertSubscription

#overview
    getTotalTraffic(from: String!, to: String!): Int
    getAvgErrorRate(from: String, to: String): Int
    getOverallLatencyv(from: String, to: String): Int
    getApiAvailability(from: String, to: String): ApiAvailability
    getLatencySummary(from: String, to: String): LatencySummary

#errors
    getTargetErrorsOverTime(from: String, to: String, apiId: String, appId: String): TargetErrorsOverTime
    getGatewayErrorsOverTime(from: String, to: String, apiId: String, appId: String): GatewayErrorsOverTime
    getTargetErrorsMap(from: String, to: String, apiId: String, appId: String): [ErrorsMap]
    getGatewayErrorsMap(from: String, to: String, apiId: String, appId: String): [ErrorsMap]
    getErrorsByCategory(from: String, to: String, apiId: String): ErrorsByCategory

}

type Mutation {
    addAPIAlertConfig(alertConfig: APIAlertConfigInput): APIAlertConfig
    addAppAlertConfig(alertConfig: AppAlertConfigInput): AppAlertConfig
    SubscribeAlert(config: AlertSubscriptionInput): AlertSubscription
    UnSubscribeAlert(userId: String): AlertSubscription
}

type AlertSubscription {
    userId: String
    alertTypes: String
    emails: String
}

type AppAlertConfig {
    apiName: String
    apiVersion: String
    appName: String
    appOwner: String
    thresholdRequestCount: Int
}

type APIAlertConfig {
    apiName: String
    apiVersion: String
    thresholdResponseTime: Int
    thresholdBackendTime: Int
}

input APIAlertConfigInput {
    apiName: String
    apiVersion: String
    thresholdResponseTime: Int
    thresholdBackendTime: Int
}

input AppAlertConfigInput {
    apiName: String
    apiVersion: String
    appName: String
    appOwner: String
    thresholdRequestCount: Int
}

input AlertSubscriptionInput {
    userId: String
    alertTypes: String
    emails: String
}

type ApiErrorSummary {
    id: ID
    apiName: String
    apiVersion: String
    uriTemplate: String
    method: String
    applicationName: String
    applicationOwner: String
    _2xx: Int
    _4xx: Int
    _5xx: Int
    faulty: Int
    throttled: Int
}

type ApiLatencySummary {
    id: ID
    apiCreatorTenantDomain: String
    apiName: String
    apiVersion: String
    apiResourceTemplate: String
    apiMethod: String
    avgResponseLatency: Int
    avgServiceLatency: Int
    avgBackendLatency: Int
    avgRequestMediationLatency: Int
    avgResponseMediationLatency: Int
    avgSecurityLatency: Int
    avgThrottlingLatency: Int
    avgOtherLatency: Int
}

type Application {
    id: String
    name: String
    owner: String
}

type ApiAvailability {
    availableCount: Int
    highResponseTimeCount: Int
    serverErrorCount: Int
}

type LatencySummary {
    time: String
    requestCount: Int
    errorCount: Int
    latencyTime: Int
}

type API {
    id: String
    name: String
    version: String
    provider: String
}

type TargetErrorsOverTime {
    time: String
    _4xx: Int
    _5xx: Int
}

type GatewayErrorsOverTime {
    time: String
    authentication: Int
    throttled: Int
    resourceNotFound: Int
    others: Int
}

type ErrorsMap {
    label: String
    counts: [IntMap]
}

type IntMap {
    key: String
    value: Int
}

type ErrorsByCategory {
    code: Int
    count: Int
}
